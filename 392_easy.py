#Initialclass Solution:    def isSubsequence(self, s: str, t: str) -> bool:                if len(t) == 0 or len(s) == 0:            return False                res = True        t_len, s_len = len(t), len(s)                if t_len < s_len:            res = False        elif s_len == 1:            if s not in t:                res = False        elif s[0] == t[0]:            res = self.isSubsequence(s[1:], t[1:])        else:            res = self.isSubsequence(s, t[1:])                    return res                print(Solution().isSubsequence("axc", "ahbgdc"))#Two pointersclass Solution:    def isSubsequence(self, s: str, t: str) -> bool:        if len(s) == 0:            return True        if len(s) > len(t):            return False                t_len, s_len = len(t), len(s)        i, j = 0, 0                while i < s_len and j < t_len:            if s[i] == t[j]:                i += 1            j += 1                return i == s_len            print(Solution().isSubsequence("axc", "ahbgdc"))